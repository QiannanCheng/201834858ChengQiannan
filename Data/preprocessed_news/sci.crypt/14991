from ninassup athena.mit.edu niko i nassuphi subject lga ncrypt sourc i got number request code so here it written x asm borland tasm do tasm lga.asm tlink t lga.asm code lga ncryption c nick nassuphi code segment assum cs:code ds:code org h start jmp begin ga particl assig bit particl move east bit particl move west bit particl move north bit particl move south bit particl move east bit particl move west bit particl move north bit particl move south collisiong rule ga rule e w n s e w n s n s e w n s e w nibbl byte reflect rule just swap bit along direct look up tabl implement two particl collis hpp lattic ga hpprule db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b rule implement veloc revers need run ga evolut revers it call wallrul becaus it same all particl hit wall head wallrul db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b maxbyt equ lineno equ srcptr dw offset buffer desptr dw offset buffer savebuff db maxbyt lineno dup buffer db maxbyt lineno dup db dup buffer db maxbyt lineno dup db dup data db db db db test lattic ga base encrypt db algorithm data encod particl db digit ga whose time evolut simul db cellular automaton type algorithm decrypt db can achiev run simul revers db thermodynam argument ensur even singl db bit flip decrypt data possibl db db after ga let evolv timestep db on can either run revers evolut press db space flip bit run press db db cryptograph applic kei would consist db number time step time locat db specif bit invers db db db db db fill ga piec code initga mov di cs:srcptr mov si offset data mov cx lineno ig push di push cx mov cx maxbyt ig mov al cs si mov cs di al inc si inc di loop ig pop cx pop di add di maxbyt loop ig mov si cs:srcptr mov di offset initga mov cx maxbyt mov al lg mov byte ptr cs si al al inc si loop lg ret displai ga molecul bounc around showga push es push si push di push cx push bx mov ax b h mov es ax mov si cs:srcptr mov di mov cx lineno add si maxbyt sg push cx push di mov cx maxbyt sg mov al cs si mov byte ptr es di al inc si add di dec cx jnz sg pop di pop cx add di loop sg pop bx pop cx pop di pop si pop es ret cs:si sours data cs:di destin data scanonemiddlelin first byte special case becaus warparound mov bl al assembl byte mov bh cs si maxbyt north on line up lower bh b bit bl bh them assembl byte mov bh cs si maxbyt south on line down higher bh b bit bl bh place stuff al mov bh cs si maxbyt west on byte left lower bh b bit bl bh mov bh cs si east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di middl byte can handl loop mov cx maxbyt sol mov bl al assembl byte mov bh cs si maxbyt north on line up lower bh b bit bl bh them assembl byte mov bh cs si maxbyt south on line down higher bh b bit bl bh place stuff al mov bh cs si west on byte left lower bh b bit bl bh mov bh cs si east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di loop sol last byte also special mov bl al assembl byte mov bh cs si maxbyt north on line up lower bh b bit bl bh them assembl byte mov bh cs si maxbyt south on line down higher bh b bit bl bh place stuff al mov bh cs si west on byte left lower bh b bit bl bh mov bh cs si maxbyt east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di ret cs:si sours data cs:di destin data scanfirstlin first byte special case becaus warparound mov bl mov bh cs si maxbyt lineno bh b bit bl bh them assembl byte mov bh cs si maxbyt bh b bit bl bh place stuff al mov bh cs si maxbyt west on byte left lower bh b bit bl bh mov bh cs si east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di middl byte can handl loop mov cx maxbyt sfl mov bl al assembl byte mov bh cs si maxbyt lineno bh b bit bl bh them assembl byte mov bh cs si maxbyt bh b bit bl bh place stuff al mov bh cs si west on byte left lower bh b bit bl bh mov bh cs si east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di loop sfl last byte also special mov bl al assembl byte mov bh cs si maxbyt lineno bh b bit bl bh them assembl byte mov bh cs si maxbyt bh b bit bl bh place stuff al mov bh cs si west on byte left lower bh b bit bl bh mov bh cs si maxbyt east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al ret cs:si sours data cs:di destin data scanlastlin first byte special case becaus warparound mov bl al assembl byte mov bh cs si maxbyt bh b bit bl bh them assembl byte mov bh cs si maxbyt lineno bh b bit bl bh place stuff al mov bh cs si maxbyt west on byte left lower bh b bit bl bh mov bh cs si east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di middl byte can handl loop mov cx maxbyt sll mov bl al assembl byte mov bh cs si maxbyt bh b bit bl bh them assembl byte mov bh cs si maxbyt lineno bh b bit bl bh place stuff al mov bh cs si west on byte left lower bh b bit bl bh mov bh cs si east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di loop sll last byte also special mov bl al assembl byte mov bh cs si maxbyt bh b bit bl bh them assembl byte mov bh cs si maxbyt lineno bh b bit bl bh place stuff al mov bh cs si west on byte left lower bh b bit bl bh mov bh cs si maxbyt east on byte right higher bh b bit bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di ret invert all veloc ga invertal push bx push cx push si mov si cs:srcptr mov bx mov cx lineno ia push cx mov cx maxbyt ia mov bl cs si mov al byte ptr cs bx offset wallrul mov cs si al inc si loop ia pop cx loop ia pop si pop cx pop bx ret iterateonc mov si cs:srcptr mov di cs:desptr mov cs:srcptr di mov cs:desptr si push si push di call scanfirstlin pop di pop si add si maxbyt add di maxbyt mov cx lineno dont scan first last l push si push di push cx call scanonemiddlelin pop cx pop di pop si add si maxbyt add di maxbyt loop l push si push di call scanlastlin pop si pop di l ret iter hpp rule cx time iter push cx call iterateonc pop cx call showga loop iter ret iter hpp rule cx time iterateuntil mov si mov cx offset iu offset iu iu mov al byte ptr cs si offset iu xor byte ptr cs si offset iu al inc si loop iu iu call iterateonc call showga mov si cs:srcptr mov cx maxbyt mov bx mov ah mov al iu mov bl byte ptr cs si mov dl byte ptr cs bx wallrul ah xor dl ah al dl inc si loop iu mov si mov cx offset iu offset iu iu mov ah byte ptr cs si offset iu ah al xor byte ptr cs si offset iu ah inc si loop iu jmp iu iu mov ax offset iu push ax ret db dup h iu push ax push bx push cx push dx push ds mov ah mov dx cs:msgptr int h pop ds pop dx pop cx pop bx pop ax ret db dup h msgptr dw offset msg msg db messag print out db code decrypt us data from lattic db which appli decod routin db after everi time step db decod function left code unchang db except after ga evolut had completelli db revers thermal time equ repetit enough equilibr ga begin mov ax h mov bh mov dh mov dl mov cx int h mov ah mov bh mov dh mov dl int h call initga call showga mov ah int h push cx mov cx time call iter call invertal call showga mov ah int h cmp al jne begin mov si cs:srcptr xor byte ptr cs si b begin mov cx time call iterateuntil call invertal call showga mov ax c h int h code end end start 